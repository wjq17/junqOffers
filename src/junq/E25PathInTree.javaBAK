package junq;
/**
 * 输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶结点所经过的结点形成一条路径。 
 */

import java.util.Stack;

import junq.util.TreeNode;

/**
 * @author JInShuangQi
 *
 * 2015年8月5日 
 */
public class E25PathInTreeNode {
    public void findPath(TreeNode root,int k){
        if(root == null)
            return;
        Stack<Integer> stack = new Stack<Integer>();
        findPath(root,k,stack);
    }
    public void findPath(TreeNode root,int k,Stack<Integer> path){
        if(root == null)
            return;
        if(root.left == null && root.right == null){
            if(root.val == k){
                System.out.println("路径开始");
                for(int i :path)
                    System.out.print(i+",");
                System.out.print(root.val);
            }
        }
        else{
            path.push(root.val);
            findPath(root.left,k-root.val,path);
            findPath(root.right,k-root.val,path);
            path.pop();
        }
    }
    public static void main(String[] args){
        TreeNode root1 = new TreeNode();
        TreeNode node1 = new TreeNode();
        TreeNode node2 = new TreeNode();
        TreeNode node3 = new TreeNode();
        TreeNode node4 = new TreeNode();
        TreeNode node5 = new TreeNode();
        TreeNode node6 = new TreeNode();
        root1.left = node1;
        root1.right = node2;
        node1.left = node3;
        node1.right = node4;
        node4.left = node5;
        node4.right = node6;
        root1.val = 8;
        node1.val = 8;
        node2.val = 7;
        node3.val = 9;
        node4.val = 2;
        node5.val = 4;
        node6.val = 7;
        E25PathInTreeNode test = new E25PathInTreeNode();
        test.findPath(root1, 25);
    }
} 